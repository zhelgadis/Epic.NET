<project name="properties" xmlns="http://nant.sf.net/schemas/nant.xsd">
    
    <!-- build-wide properties -->
	<property name="build.verbosity" value="quiet" overwrite="false" />
	<property name="website.presentationstyle" value="Prototype" overwrite="false" />
    
	<property name="nant.settings.currentframework" value="net-4.0" if="${platform::is-windows()}" />
    <property name="nant.settings.currentframework" value="mono-4.0" if="${not platform::is-windows()}" />

	<property name="repository.builddirectory" value="${path::combine(repository.rootdirectory, 'build')}"/>
	<property name="repository.testdirectory" value="${path::combine(path::combine(repository.builddirectory, 'tests'), build.configuration)}" overwrite="false"/>

	<property name="epic.infofile" value="${path::combine(path::combine(repository.rootdirectory, 'Code'), 'EpicInfo.cs')}"/>
	
	<property name="msbuild.name" value="msbuild.exe" if="${platform::is-windows()}" />
	<property name="msbuild.name" value="xbuild.exe" if="${not platform::is-windows()}" />
	<property name="msbuild.path" value="${path::combine(framework::get-framework-directory(framework::get-target-framework()), msbuild.name)}" />
	
	<property name="library.dir" value="${path::combine(repository.rootdirectory, '3rdParties')}" />
	<property name="nunit.path" value="${path::combine(path::combine(library.dir, 'NUnit'), 'nunit-console-x86.exe')}" />
	<property name="samples.dir" value="${path::combine(repository.rootdirectory, 'Challenges')}" />
	
	<property name="documentation.dir" value="${path::combine(repository.rootdirectory, 'Documentation')}"/>
	<property name="build.tmp.dir" value="${path::combine(repository.builddirectory, 'tmp')}"/>
    <property name="api.tmp.path" value="${path::combine(build.tmp.dir, 'api')}"/>
    <property name="manual.tmp.path" value="${path::combine(build.tmp.dir, 'manual.chunked')}"/>
    <property name="website.tmp.path" value="${path::combine(build.tmp.dir, 'website')}"/>
    <property name="website.tmp.docApi.path" value="${path::combine(path::combine(website.tmp.path, 'doc'), 'api')}"/>
    <property name="website.tmp.docManual.path" value="${path::combine(path::combine(website.tmp.path, 'doc'), 'manual')}"/>

    <property name="MailLogger.failure.notify" value="true" if="${property::exists('MailLogger.mailhost')}" />
    <property name="MailLogger.success.notify" value="true" if="${property::exists('MailLogger.mailhost')}" />
    <property name="MailLogger.failure.subject" value="[Epic.NET] build failure" if="${property::exists('MailLogger.mailhost')}" />
    <property name="MailLogger.success.subject" value="[Epic.NET] build successful" if="${property::exists('MailLogger.mailhost')}" />
    <property name="MailLogger.failure.attachments" value="MailLogger.files" if="${property::exists('MailLogger.mailhost')}" />
    <property name="MailLogger.success.attachments" value="MailLogger.files" if="${property::exists('MailLogger.mailhost')}" />

    <fileset id="MailLogger.files">
        <include name="${path::combine(repository.testdirectory, '*.QA.xml')}" />
        <include name="${path::combine(repository.testdirectory, '*.Coverage.xml')}" />
        <include name="${path::combine(repository.testdirectory, '*.Coverage.html')}" />
    </fileset>
	
</project>
