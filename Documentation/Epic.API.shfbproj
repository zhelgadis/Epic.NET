<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <!-- The configuration and platform will be used to determine which
         assemblies to include from solution and project documentation
         sources -->
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{4064220d-1c73-4463-b6f5-29869ddec88b}</ProjectGuid>
    <SHFBSchemaVersion>1.9.3.0</SHFBSchemaVersion>
    <!-- AssemblyName, Name, and RootNamespace are not used by SHFB but Visual
         Studio adds them anyway -->
    <AssemblyName>Documentation</AssemblyName>
    <RootNamespace>Documentation</RootNamespace>
    <Name>Documentation</Name>
    <!-- SHFB properties -->
    <OutputPath>..\build\tmp\api\</OutputPath>
    <HtmlHelpName>Documentation</HtmlHelpName>
    <Language>en-US</Language>
    <NamingMethod>MemberName</NamingMethod>
    <Preliminary>False</Preliminary>
    <PresentationStyle>Epic.Prototype</PresentationStyle>
    <SyntaxFilters>CSharp</SyntaxFilters>
    <HelpFileFormat>Website</HelpFileFormat>
    <DisableCodeBlockComponent>False</DisableCodeBlockComponent>
    <CopyrightText>
    </CopyrightText>
    <CopyrightHref>
    </CopyrightHref>
    <HelpTitle>Epic.NET</HelpTitle>
    <VisibleItems>Attributes, Protected, ProtectedInternalAsProtected, SealedProtected</VisibleItems>
    <ProjectSummary>The Epic.NET code base consists of many different libraries that can work together in various combination, thanks to carefully designed responsibilities that lead to high cohesion and low coupling.&amp;lt%3bbr/&amp;gt%3b&amp;lt%3bbr/&amp;gt%3b
This is the reference documentation of such libraries %28whose objectives has been described in the &amp;lt%3ba href=&amp;quot%3bhttp://epic.tesio.it/doc/the_bellis_perennis.html&amp;quot%3b&amp;gt%3bsecond part of the manual&amp;lt%3b/a&amp;gt%3b%29. There&amp;#39%3bs no convention between DLL&amp;#39%3bs names and namespaces, so that for example you will not find an Epic.Prelude namespace: while each library&amp;#39%3bs name maps its usage pattern, namespaces express the logical organization of the modelled concepts.  </ProjectSummary>
    <ComponentConfigurations>
      <ComponentConfig id="API Token Resolution" enabled="True" xmlns="">
        <component id="API Token Resolution" type="Microsoft.Ddue.Tools.SharedContentComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">

			{@TokenFiles}
			<replace elements="/*//token" item="string(.)" /></component>
      </ComponentConfig>
      <ComponentConfig id="Code Block Component" enabled="True" xmlns="">
        <component id="Code Block Component" type="SandcastleBuilder.Components.CodeBlockComponent" assembly="{@SHFBFolder}SandcastleBuilder.Components.dll">
          <basePath value="{@HtmlEncProjectFolder}" />
          <languageFilter value="true" />
          <allowMissingSource value="false" />
          <removeRegionMarkers value="true" />
          <colorizer syntaxFile="{@SHFBFolder}Colorizer\highlight.xml" styleFile="{@SHFBFolder}Colorizer\highlight.xsl" copyImageUrl="../icons/CopyCode.gif" language="cs" tabSize="4" numberLines="true" outlining="false" keepSeeTags="false" defaultTitle="true" />
        </component>
      </ComponentConfig>
      <ComponentConfig id="IntelliSense Component" enabled="True" xmlns="">
        <component id="IntelliSense Component" type="SandcastleBuilder.Components.IntelliSenseComponent" assembly="{@SHFBFolder}SandcastleBuilder.Components.dll">
          <!-- Output options (optional)
					 Attributes:
							Include Namespaces (false by default)
							Namespaces filename ("Namespaces" if not specified or empty)
							Directory (current folder if not specified or empty) -->
          <output includeNamespaces="false" namespacesFile="Namespaces" folder="{@OutputFolder}" />
        </component>
      </ComponentConfig>
    </ComponentConfigurations>
    <PlugInConfigurations />
    <DocumentationSources>
      <DocumentationSource sourceFile="..\Code\Epic.Core\Epic.Core.csproj" />
      <DocumentationSource sourceFile="..\Code\Epic.Prelude\Epic.Prelude.csproj" />
      <DocumentationSource sourceFile="..\Code\Epic.Query\Epic.Query.csproj" />
      <DocumentationSource sourceFile="..\Code\Epic.Query.Linq\Epic.Query.Linq.csproj" />
      <DocumentationSource sourceFile="..\Code\Epic.Query.Object\Epic.Query.Object.csproj" />
    </DocumentationSources>
    <RootNamespaceTitle>API</RootNamespaceTitle>
    <BinaryTOC>False</BinaryTOC>
    <NamespaceSummaries>
      <NamespaceSummaryItem name="Epic" isDocumented="True">The &lt;b&gt;Epic&lt;/b&gt; namespace contains fundamental concepts that all Domain Driven applications built with the Epic's modeling patterns in mind will require.&lt;br/&gt;&lt;br/&gt;

Epic.Prelude defines here &lt;a href="T_Epic_IVisitable.htm"&gt;IVisitable&lt;/a&gt; interface and the &lt;a href="http://epic.tesio.it/doc/manual/epic-prelude.html#about_interpreting_values"&gt;composite visitor pattern&lt;/a&gt;.
Epic.Core defines the &lt;a href="T_Epic_Enterprise.htm"&gt;Enterprise&lt;/a&gt; entry point to the domain model.</NamespaceSummaryItem>
<NamespaceSummaryItem name="Epic.Collections" isDocumented="True">The &lt;b&gt;Epic.Collections&lt;/b&gt; namespace contains useful models of collections for DDD.&lt;br/&gt;
It's defined in Epic.Prelude.</NamespaceSummaryItem>
<NamespaceSummaryItem name="Epic.Environment" isDocumented="True">Epic.Environment contains base implementations of &lt;a href="http://epic.tesio.it/doc/api/html/T_Epic_IEnvironment.htm"&gt;IEnvironment&lt;/a&gt;.&lt;br/&gt;
It's defined in Epic.Core.</NamespaceSummaryItem>
<NamespaceSummaryItem name="Epic.Events" isDocumented="True">The Epic.Events namespace contains common use EventArgs for domain models.&lt;br/&gt;
It's defined in Epic.Core.</NamespaceSummaryItem>
<NamespaceSummaryItem name="Epic.Math" isDocumented="True">The &lt;b&gt;Epic.Math&lt;/b&gt; namespace contains common mathematical abstractions such as &lt;a href="http://epic.tesio.it/doc/api/html/T_Epic_Math_IMapping_2.htm"&gt;Mappings&lt;/a&gt;, generic groups, abelian groups and rings.&lt;br/&gt;
It is defined in Epic.Prelude.</NamespaceSummaryItem>
<NamespaceSummaryItem name="Epic.Organization" isDocumented="True">The &lt;b&gt;Epic.Organization&lt;/b&gt; namespace contains base classes for the organization of the enterprise using the domain model.&lt;br/&gt;
It's defined in Epic.Core.</NamespaceSummaryItem>
<NamespaceSummaryItem name="Epic.Query" isDocumented="True">Epic.Query contains common tools used by all the query models available (Epic.Query.Object and Epic.Query.Linq).&lt;br/&gt;
It is defined in Epic.Query.</NamespaceSummaryItem>
<NamespaceSummaryItem name="Epic.Query.Linq" isDocumented="True">The &lt;b&gt;Epic.Query.Linq&lt;/b&gt; contains the interface and the base class of Linq based repositories.&lt;br/&gt;
It's defined in Epic.Query.Linq.</NamespaceSummaryItem>
<NamespaceSummaryItem name="Epic.Query.Linq.Expressions.Normalization" isDocumented="True">The Epic.Query.Linq.Expressions.Normalization namespace contains visitor that "normalize" an ExpressionTree.&lt;br/&gt;
It's defined in Epic.Query.Linq.</NamespaceSummaryItem>
<NamespaceSummaryItem name="Epic.Query.Object" isDocumented="True">The &lt;b&gt;Epic.Query.Object&lt;/b&gt; namespace provide a simplified alternative to Linq repositories based on a slightly modified &lt;a href="http://martinfowler.com/eaaCatalog/queryObject.html"&gt;QueryObject&lt;/a&gt; pattern. It allows entity lookups by specifications, sorting and slicing, but can be easily extended to produce custom projections and aggregations.&lt;br/&gt;
It's defined in Epic.Query.Object.</NamespaceSummaryItem>
<NamespaceSummaryItem name="Epic.Query.Object.Expressions" isDocumented="True">The Epic.Query.Object.Expressions contains the &lt;a href="http://epic.tesio.it/doc/api/html/T_Epic_IVisitable.htm"&gt;visitable&lt;/a&gt; expressions representing a query.&lt;br/&gt;
It is defined in Epic.Query.Object.</NamespaceSummaryItem>
<NamespaceSummaryItem name="Epic.Query.Relational" isDocumented="True">The &lt;b&gt;Epic.Query.Relational&lt;/b&gt; namespaces defines a tree of relational algebra expressions with bag semantics. It's used as an intermediate step from Epic.Query.Linq and Epic.Query.Object to any relational backend (read each specific SQL dialect).&lt;br/&gt;
It's defined in Epic.Query.</NamespaceSummaryItem>
<NamespaceSummaryItem name="Epic.Query.Relational.Operations" isDocumented="True">Epic.Query.Relational.Operations expresses relational operations (and some bag one, like sorting and grouping).&lt;br/&gt;
It's defined in Epic.Query.</NamespaceSummaryItem>
<NamespaceSummaryItem name="Epic.Query.Relational.Predicates" isDocumented="True">Epic.Query.Relational.Predicates express common relational predicates.&lt;br/&gt;
It's defined in Epic.Query.</NamespaceSummaryItem>
<NamespaceSummaryItem name="Epic.Specifications" isDocumented="True">The &lt;b&gt;Epic.Specifications&lt;/b&gt; namespace contains a general purpose framework for specifications. It provides a closure of operations over basic logical operators (conjunction, disjunction and negation) with some well designed extensions for handling inhteritance.&lt;br/&gt;
It's defined in Epic.Prelude.</NamespaceSummaryItem>
<NamespaceSummaryItem name="Epic.Visitors" isDocumented="True">The Epic.Visitors namespace contains a set of general purpose visitors.&lt;br/&gt;
It's defined in Epic.Prelude.</NamespaceSummaryItem></NamespaceSummaries>
  </PropertyGroup>
  <!-- There are no properties for these groups.  AnyCPU needs to appear in
       order for Visual Studio to perform the build.  The others are optional
       common platform types that may appear. -->
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x86' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|x64' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|Win32' ">
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|Win32' ">
  </PropertyGroup>
  <!-- Import the SHFB build targets -->
  <Import Project="$(SHFBROOT)\SandcastleHelpFileBuilder.targets" />
</Project>