<?xml version="1.0" ?> 
<project name="Epic.NET" default="continuous" xmlns="http://nant.sf.net/schemas/nant.xsd">
    
	<property name="build.target" value="Build" overwrite="false" />
   	<property name="build.configuration" value="Debug" overwrite="false" />

	<property name="repository.rootdirectory" value="${path::get-full-path('.')}" />
	<property name="nant.include.dir" value="${path::combine(path::combine(repository.rootdirectory, 'Tools'), 'NantScripts')}" />

	<include buildfile="${path::combine(nant.include.dir, 'Properties.include')}" if="${not property::exists('epic.infofile')}"/>
	
    <target name="continuous" depends="clean-builddirectory">
        <tstamp />
        <if test="${property::exists('build.vcs.number')}">
            <echo message="Commit: ${build.vcs.number}" />
        </if>
        <call target="update-version" />
        <trycatch>
            <try>
                <call target="build-code" />
                <call target="build-samples" />
                
                <call target="test-code" cascade="false"/>
                <call target="test-samples" cascade="false" />
                <call target="documentation" cascade="false" />
            </try>
            <finally>
                <call target="restore-version" />
            </finally>
        </trycatch>
    </target>
    
	<target name="clean-builddirectory">
        <delete if="${directory::exists(website.tmp.path)}" dir="${website.tmp.path}" />
        <delete if="${directory::exists(api.tmp.path)}" dir="${api.tmp.path}" />
	    <delete if="${directory::exists(repository.testdirectory)}">
	        <fileset>
	            <include name="${path::combine(path::combine(repository.testdirectory, '**'), '*.dll')}" />
	            <include name="${path::combine(path::combine(repository.testdirectory, '**'), '*.pdb')}" />
	            <include name="${path::combine(path::combine(repository.testdirectory, '**'), '*.xml')}" />
	            <include name="${path::combine(path::combine(repository.testdirectory, '**'), '*.txt')}" />
	            <include name="${path::combine(path::combine(repository.testdirectory, '**'), '*.log')}" />
	            <include name="${path::combine(path::combine(repository.testdirectory, '**'), '*.html')}" />
	        </fileset>
	    </delete>
	    <delete if="${directory::exists(repository.builddirectory)}">
	        <fileset>
	            <include name="${path::combine(path::combine(repository.builddirectory, '**'), '*.dll')}" />
	            <include name="${path::combine(path::combine(repository.builddirectory, '**'), '*.pdb')}" />
	            <include name="${path::combine(path::combine(repository.builddirectory, '**'), '*.xml')}" />
	            <include name="${path::combine(path::combine(repository.builddirectory, '**'), '*.txt')}" />
	            <include name="${path::combine(path::combine(repository.builddirectory, '**'), '*.log')}" />
	            <include name="${path::combine(path::combine(repository.builddirectory, '**'), '*.html')}" />
	        </fileset>
	    </delete>
	</target>
    
    <target name="update-version">
        <if test="${build.configuration=='Release'}">
            <if test="${not (property::exists('build.number'))}">
                <fail message="Can not build a Release without a build numeber. Use -D:build.number=N to define one."/>
            </if>
            <foreach item="Line" in="${epic.infofile}" property="line">
                <if test="${string::contains(line, '[assembly: AssemblyVersion')}">
                    <property name="assembly.version" value="${string::replace(string::replace(line, '[assembly: AssemblyVersion(&quot;', ''), '&quot;)]', '')}"/>
                    <regex pattern="^(?'_major'\d+)\.(?'_minor'\d+)\.(?'_build'\d+)\.(?'_revision'\d+)$" input="${assembly.version}"/>
                    <property name="assembly.file.version" value="${_major + '.' + _minor + '.' + build.number + '.' + _revision}"/>
                </if>
            </foreach>
            <if test="${not (property::exists('assembly.file.version'))}">
                <fail message="Can not build a Release: can't define the AssemblyFileVersion."/>
            </if>
            <move file="${epic.infofile}" tofile="${epic.infofile}.orig" />
            <copy file="${epic.infofile}.orig" tofile="${epic.infofile}">
                <filterchain>
                    <replacestring from="${'[assembly: AssemblyFileVersion(&quot;'+assembly.version+'&quot;)]'}" 
                                   to="${'[assembly: AssemblyFileVersion(&quot;'+assembly.file.version+'&quot;)]'}" />
                </filterchain>
            </copy>
        </if>
    </target>
    
    <target name="restore-version">
        <if test="${file::exists(epic.infofile + '.orig')}">
            <move file="${epic.infofile}.orig" tofile="${epic.infofile}" overwrite="true" />
        </if>
    </target>
    
    <target name="build-code">
        <nant buildfile="Code/nant.build" target="build-code" />
    </target>
    
    <target name="build-samples">
        <foreach item="Folder" in="${samples.dir}" property="sample">
            <nant buildfile="${path::combine(sample, 'nant.build')}"  target="build-code"/>
        </foreach>
    </target>

    <target name="test-code">
        <nant buildfile="Code/nant.build" target="run-tests" />
    </target>

    <target name="test-samples">
        <foreach item="Folder" in="${samples.dir}" property="sample">
            <nant buildfile="${path::combine(sample, 'nant.build')}"  target="run-tests"/>
        </foreach>
    </target>
    
    <target name="documentation" depends="api,manual">
        <property name="website.commit.msg" value="Update documentation to ${build.vcs.number}."/>
        <echo message="Clone git@ssh.github.com:bards/Epic.NET.git &quot;${website.tmp.path}&quot;"/>
        <exec program="cmd">
            <arg value="/c" />
            <arg value="git clone git@ssh.github.com:bards/Epic.NET.git -b gh-pages &quot;${website.tmp.path}&quot;" />
        </exec>
        <delete if="${directory::exists(website.tmp.docApi.path)}" dir="${website.tmp.docApi.path}" />
        <delete if="${directory::exists(website.tmp.docManual.path)}" dir="${website.tmp.docManual.path}" />
        <copy todir="${website.tmp.docApi.path}" if="${directory::exists(api.tmp.path)}">
            <fileset basedir="${api.tmp.path}">
                <include name="${path::combine('html', '*.htm')}" />
                <include name="${path::combine('icons', '*.gif')}" />
                <include name="${path::combine('scripts', '*.js')}" />
                <include name="${path::combine('styles', '*.css')}" />
            </fileset>
        </copy>
        <copy todir="${website.tmp.docManual.path}" if="${directory::exists(manual.tmp.path)}">
            <fileset basedir="${manual.tmp.path}">
                <include name="*.html" />
                <include name="${path::combine('images', '*.*')}" />
                <include name="${path::combine('css', '*.css')}" />
            </fileset>
        </copy>
        <exec program="cmd" workingdir="${website.tmp.path}">
            <arg value="/c" />
            <arg value="git add ." />
        </exec>
        <echo message="Commit API doc changes with message &quot;${website.commit.msg}&quot;"/>
        <exec program="cmd" workingdir="${website.tmp.path}">
            <arg value="/c" />
            <arg value="git commit -am &quot;${website.commit.msg}&quot;" />
        </exec>
        <exec program="cmd" workingdir="${website.tmp.path}">
            <arg value="/c" />
            <arg value="git push origin gh-pages" />
        </exec>
    </target>
    
    <target name="api">
        <property name="project.path" value="${path::combine(documentation.dir, 'Epic.API.shfbproj')}"/>
        <echo message="Call sandcastle with arguments ${project.path} /p:PresentationStyle=${website.presentationstyle} /t:${build.target} /p:Configuration=${build.configuration} /v:${build.verbosity}"/>
        <exec program="${msbuild.path}"        
             workingdir="${documentation.dir}" >
             <arg value="${project.path}"/>
             <arg value="/p:PresentationStyle=${website.presentationstyle}"/>
             <arg value="/t:${build.target}"/>
             <arg value="/p:Configuration=${build.configuration}"/>
             <arg value="/v:${build.verbosity}"/>
        </exec>
    </target>
    
    <target name="manual">
        <if test="${property::exists('a2x.path')}">
            <exec program="python"        
                  workingdir="${documentation.dir}" verbose="true" >
                  <!-- 
                      Enable Verbosity
                  <arg value="-v"/>
                    --> 
                  <arg value="${a2x.path}" />
                  <arg value="--no-xmllint"/>
                  <arg value="--icons"/>
                  <arg value="--xsltproc-opts=&quot;--stringparam highlight.source 1 --stringparam navig.graphics 0&quot;"/>
                  <arg value="--resource=${path::combine(documentation.dir, 'resources')}"/>
                  <arg value="--format=chunked"/>
                  <arg value="--destination-dir=../build/tmp/"/>
                  <arg value="--conf-file=a2x.conf"/>
                  <arg value="--stylesheet=&quot;css/layout.css css/screen.css css/shCore.css css/shCoreDefault.css css/shThemeDefault.css css/documentation.css&quot;"/>
                  <arg value="--xsl-file=xsl/website.xsl"/>
                  <arg value="en-US/manual.txt"/>
            </exec>
        </if>
    </target>

    
</project>
